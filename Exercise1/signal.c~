/* NETWORK PROGRAMMING - EXERCISE 1
Write a program signal.c taking N, K, L, and M as CLA for the following requirement.
(a) Parent process creates N processes and each of the N processes creates K child processes.
When a process is created, its pid is stored in a file. When the last process i.e. (N*K)th is
created, it will send SIGUSR1 signal to all processes indicating that they all can use the file
now.
(b) Each process selects a random number between 1 and 31 (except SIGKILL and SIGSTOp)
and sends that signal to one of the randomly selected process. Process should print signal
number and the process id to the console.
(c) Each process follows step (b) M number of times. After that it checks if the number of
signals received is less than L, then it will terminate. Else it repeats step(b) M number of
times. When it terminates, it should print a message "Process <pid> received x number of
signals. So terminating.
(d) Before beginning the loop in (c), a process which has a child will check if all of its children
exited. If yes, it will also exit printing "Process <pid> exiting becuase all its children
exited".
*/

#include <signal.h>
#include <stdio.h>

int
main (int argc, char **argv)
{				//n,k,l,m
/* argv[1] = n = number of child processes of the parent
** argv[2] = k = number of child processes of each child
** argv[3] = l = threshold of termination
** argv[4] = m = number of reptitions of step (b)
*/
  int n = 3, k = 4, l = 10, m = 2;
  if (argc < 4)
    {
      printf("Wrong number of arguments, assuming defaults: n=3,k=4,l=10,m=2");
	}
  else
    {
      n = argv[1];
      k = argv[2];
      l = argv[3];
      m = argv[4];
    }

  int i, j;
  for (i = 0; i < n; i++)
    {
      pid = fork ();
      if (pid == 0)
	{			//child
	  for (j = 0; j < k; j++)
	    {

	    }
	}
      else
	{			//parent

	}
    }

}
